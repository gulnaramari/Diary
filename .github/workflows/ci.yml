name: Django CI
on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: python -m pip install --upgrade pip
      - run: pip install flake8
      - run: flake8 . --ignore=W605,E501

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: diary
          POSTGRES_USER: mariam
          POSTGRES_PASSWORD: Mariam
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U app -d app"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=20

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run migrations (Postgres)

        working-directory: .
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: "True"
          POSTGRES_DB: diary
          POSTGRES_USER: mariam
          POSTGRES_PASSWORD: Mariam
          POSTGRES_HOST: "127.0.0.1"
          POSTGRES_PORT: "5432"
        run: python manage.py migrate --noinput

      # Тесты у тебя идут на SQLite (по условию 'test' в sys.argv) — это ок.
      - name: Run tests
        working-directory: .
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: "True"
        run: python manage.py test

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'      # пушим образы только на push, не на PR
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .                         # при необходимости смените на ${{ env.PROJECT_DIR }}
          # file: Diary/Dockerfile           # раскомментируйте, если Dockerfile не в корне
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/diary:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/diary:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    concurrency:
      group: prod-deploy
      cancel-in-progress: true

    steps:
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - uses: actions/checkout@v3

      - name: Create .env file
        uses: SpicyPizza/create-envfile@v2
        with:
          envkey_SECRET_KEY: ${{ secrets.SECRET_KEY }}
          envkey_DEBUG: "False"
          envkey_DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          envkey_IMAGE_TAG: ${{ github.sha }}


          # Postgres (секреты так и назови в репозитории: POSTGRES_DB/USER/PASSWORD)
          envkey_POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          envkey_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          envkey_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          envkey_POSTGRES_HOST: "db"
          envkey_POSTGRES_PORT: "5432"

          # Redis / Celery
          envkey_REDIS_URL: "redis://redis:6379/1"


          # Рекомендуется задать эти секреты в настройках репо
          envkey_ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
          envkey_CSRF_TRUSTED_ORIGINS: ${{ secrets.CSRF_TRUSTED_ORIGINS }}

      - name: Copy files to server
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.prod.yaml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/docker-compose.prod.yaml
          scp -o StrictHostKeyChecking=no .env ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/.env

      - name: Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            set -euo pipefail
            cd ~
                               
            echo '${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}' | sudo docker login -u '${{ secrets.DOCKER_HUB_USERNAME }}' --password-stdin || true
          
            # тянем образы и поднимаем стэк
            sudo docker compose pull
            sudo docker compose down --remove-orphans
            sudo docker compose up -d --remove-orphans
          
            # миграции и статика (в отдельном одноразовом контейнере web)
            sudo docker compose run --rm web python manage.py migrate --noinput
            sudo docker compose run --rm web python manage.py collectstatic --noinput
          
            # посмотреть статусы
            sudo docker compose ps
          EOF
