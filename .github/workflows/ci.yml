name: Django CI
on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: python -m pip install --upgrade pip
      - run: pip install flake8
      - run: flake8 . --ignore=W605,E501

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: diary
          POSTGRES_USER: mariam
          POSTGRES_PASSWORD: Mariam
        ports:
          - 5432:5432
        options: >-
          # ✔ исправлено: проверяем существующие БД/юзера
          --health-cmd="pg_isready -U mariam -d diary"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=20

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run migrations (Postgres)
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: "True"
          POSTGRES_DB: diary
          POSTGRES_USER: mariam
          POSTGRES_PASSWORD: Mariam
          POSTGRES_HOST: "127.0.0.1"
          POSTGRES_PORT: "5432"
        run: python manage.py migrate --noinput

      - name: Run tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: "True"
        run: python manage.py test

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/diary-web:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/diary-web:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 60
    concurrency:
      group: prod-deploy-${{ github.ref }}   # один деплой на ветку
      cancel-in-progress: true

    steps:
      # ⬇️ Надёжная замена webfactory/ssh-agent
      - name: Setup SSH
        run: |
          umask 077
          mkdir -p ~/.ssh
          printf '%s\n' "${{ secrets.SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_ed25519
          ssh-keyscan -H "${{ secrets.SERVER_IP }}" >> ~/.ssh/known_hosts

      - uses: actions/checkout@v4

      # ⚠️ Имя переменной: используем DOCKERHUB_USERNAME (как в build)
      - name: Create .env file
        uses: SpicyPizza/create-envfile@v2
        with:
          envkey_SECRET_KEY: ${{ secrets.SECRET_KEY }}
          envkey_DEBUG: "False"
          envkey_DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          envkey_IMAGE_TAG: ${{ github.sha }}

          # Postgres
          envkey_POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          envkey_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          envkey_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          envkey_POSTGRES_HOST: "db"
          envkey_POSTGRES_PORT: "5432"

          # Redis
          envkey_REDIS_URL: "redis://redis:6379/1"

          # Django
          envkey_ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
          envkey_CSRF_TRUSTED_ORIGINS: ${{ secrets.CSRF_TRUSTED_ORIGINS }}

      - name: Copy files to server
        run: |
          scp -o StrictHostKeyChecking=yes docker-compose.prod.yaml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/docker-compose.prod.yaml
          scp -o StrictHostKeyChecking=yes .env ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/.env

      - name: Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            set -euo pipefail
            cd ~
            echo '${{ secrets.DOCKERHUB_TOKEN }}' | sudo docker login -u '${{ secrets.DOCKERHUB_USERNAME }}' --password-stdin || true

            # Диагностика: убедимся, что compose видит правильные образы и теги
            sudo docker compose -f docker-compose.prod.yaml --env-file .env config | grep -i image || true

            # Если Celery НЕ нужна — поднимаем только web/db/redis
            sudo docker compose -f docker-compose.prod.yaml --env-file .env pull web db redis
            sudo docker compose -f docker-compose.prod.yaml --env-file .env down --remove-orphans
            sudo docker compose -f docker-compose.prod.yaml --env-file .env up -d web db redis

            # миграции и статика
            sudo docker compose -f docker-compose.prod.yaml --env-file .env run --rm web python manage.py migrate --noinput
            sudo docker compose -f docker-compose.prod.yaml --env-file .env run --rm web python manage.py collectstatic --noinput

            sudo docker compose -f docker-compose.prod.yaml --env-file .env ps
          EOF
